// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gnmi_dialout

import (
	context "context"
	gnmi "github.com/openconfig/gnmi/proto/gnmi"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GNMIDialOutClient is the client API for GNMIDialOut service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GNMIDialOutClient interface {
	// Publish allows the target to send telemetry updates (in the form of
	// SubscribeResponse messaages, which have the same semantics as in the
	// gNMI Subscribe RPC, to a client. The client may optionally return the
	// PublishResponse message in response to the dial-out connection from the
	// target as acknowledgement to the SubscribeResponse message
	//
	// The configuration of subscriptions associated with the publish RPC may
	// be through the OpenConfig telemetry configuration and operational state
	// model:
	// https://github.com/openconfig/public/blob/master/release/models/telemetry/openconfig-telemetry.yang
	Publish(ctx context.Context, opts ...grpc.CallOption) (GNMIDialOut_PublishClient, error)
}

type gNMIDialOutClient struct {
	cc grpc.ClientConnInterface
}

func NewGNMIDialOutClient(cc grpc.ClientConnInterface) GNMIDialOutClient {
	return &gNMIDialOutClient{cc}
}

func (c *gNMIDialOutClient) Publish(ctx context.Context, opts ...grpc.CallOption) (GNMIDialOut_PublishClient, error) {
	stream, err := c.cc.NewStream(ctx, &GNMIDialOut_ServiceDesc.Streams[0], "/gnmi.dialout.gNMIDialOut/Publish", opts...)
	if err != nil {
		return nil, err
	}
	x := &gNMIDialOutPublishClient{stream}
	return x, nil
}

type GNMIDialOut_PublishClient interface {
	Send(*gnmi.SubscribeResponse) error
	Recv() (*PublishResponse, error)
	grpc.ClientStream
}

type gNMIDialOutPublishClient struct {
	grpc.ClientStream
}

func (x *gNMIDialOutPublishClient) Send(m *gnmi.SubscribeResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gNMIDialOutPublishClient) Recv() (*PublishResponse, error) {
	m := new(PublishResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GNMIDialOutServer is the server API for GNMIDialOut service.
// All implementations must embed UnimplementedGNMIDialOutServer
// for forward compatibility
type GNMIDialOutServer interface {
	// Publish allows the target to send telemetry updates (in the form of
	// SubscribeResponse messaages, which have the same semantics as in the
	// gNMI Subscribe RPC, to a client. The client may optionally return the
	// PublishResponse message in response to the dial-out connection from the
	// target as acknowledgement to the SubscribeResponse message
	//
	// The configuration of subscriptions associated with the publish RPC may
	// be through the OpenConfig telemetry configuration and operational state
	// model:
	// https://github.com/openconfig/public/blob/master/release/models/telemetry/openconfig-telemetry.yang
	Publish(GNMIDialOut_PublishServer) error
	mustEmbedUnimplementedGNMIDialOutServer()
}

// UnimplementedGNMIDialOutServer must be embedded to have forward compatible implementations.
type UnimplementedGNMIDialOutServer struct {
}

func (UnimplementedGNMIDialOutServer) Publish(GNMIDialOut_PublishServer) error {
	return status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedGNMIDialOutServer) mustEmbedUnimplementedGNMIDialOutServer() {}

// UnsafeGNMIDialOutServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GNMIDialOutServer will
// result in compilation errors.
type UnsafeGNMIDialOutServer interface {
	mustEmbedUnimplementedGNMIDialOutServer()
}

func RegisterGNMIDialOutServer(s grpc.ServiceRegistrar, srv GNMIDialOutServer) {
	s.RegisterService(&GNMIDialOut_ServiceDesc, srv)
}

func _GNMIDialOut_Publish_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GNMIDialOutServer).Publish(&gNMIDialOutPublishServer{stream})
}

type GNMIDialOut_PublishServer interface {
	Send(*PublishResponse) error
	Recv() (*gnmi.SubscribeResponse, error)
	grpc.ServerStream
}

type gNMIDialOutPublishServer struct {
	grpc.ServerStream
}

func (x *gNMIDialOutPublishServer) Send(m *PublishResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gNMIDialOutPublishServer) Recv() (*gnmi.SubscribeResponse, error) {
	m := new(gnmi.SubscribeResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GNMIDialOut_ServiceDesc is the grpc.ServiceDesc for GNMIDialOut service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GNMIDialOut_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gnmi.dialout.gNMIDialOut",
	HandlerType: (*GNMIDialOutServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Publish",
			Handler:       _GNMIDialOut_Publish_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "dialout/gnmi.dialout.proto",
}
